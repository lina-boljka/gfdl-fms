#!/bin/bash
#------------------------------------------------------------------------------#
# Script for compiling fortran source code. Use simple_run to then run fms.x
# Host-specific settings
include=(/usr/include/mpich-x86_64) # locations of header files
links=(/usr/lib64/mpich/lib)        # locations of library files
pgi=/opt/pgi/linux86-64/17.10/bin

#------------------------------------------------------------------------------#
# Configure settings
# When you modify code, just create a new path_names file that points
# to your new/edited fortran file
# Below, path_names_hs points to the original, unedited GFDL model
# with Held-Suarez forcing.
pathnames=src/path_names_hs
mkmf=make/mkmf                           # path to executable mkmf
mkmftemplate=make/mkmf.template          # template of most basic settings
mppnsource=postprocessing/mppnccombine.c # source code
cppdefs="-Duse_libMPI -Duse_netCDF"      # not sure what this does
flags_links="${links[@]/#/-L}"           # search these paths for library files
flags_include="${include[@]/#/-I}"       # include flags
flags_libs="-lmpl -lmpich -lfmpich -lmpichf90 -lnetcdff -lnetcdf -lhdf5_hl -lhdf5 -lm -lz" # for mppnccombine
# Make sure necessary things are in path
[ ! -d bin ]           && mkdir bin || echo "Warning: Leaving old compiled source."
[ ! -d src ]           && echo "Error: Could not find source code directory $src."        && exit 1
[ ! -r $pathnames ]    && echo "Error: Could not find path_names file $pathnames."        && exit 1
[ ! -r $mppnsource ]   && echo "Error: Could not find mppnccombine source code."          && exit 1
[ ! -r $mkmftemplate ] && echo "Error: Could not find mkmf template."                     && exit 1
[ ! -r $mkmf ]         && echo "Error: Could not find Makefile-generating utility $mkmf." && exit 1

#------------------------------------------------------------------------------#
# Create mppnccombine; should supply with same libraries supplied to model executable through its makefile
# Documentation for pgcc:
# -o file      = use this file as name of executable
# -O<level>    = set optimization level; sets to 2 if number not specified
# -I directory = add directory to compiler search path; these are 'header' files
# -L directory = change the directory in which "linker" searches for libraries
# -l library   = load lib<library>.a from the standard library directory (supplied by L)
time=$(date +%s)
echo "Generating mppnccombine executable."
$pgi/pgcc -O -o mppnccombine.x $flags_include $mppnsource $flags_links $flags_libs

#------------------------------------------------------------------------------#
# Create Makefile from a template, with the make-Makefile utility 'mkmf'
# Documentaiton for mkmf:
# -p = program (name of final target)
# -t = template (list of MACROS/COMMANDS that get appended to beginning of final Makefile)
# -c = list of 'cpp #define's passed to source files (what?)
# -a = abspath, attaches 'abspath' (here, src) to the FRONT of RELATIVE paths to the source file
# args (all the later stuff) = list of directories/files to be searched for targets and dependencies
echo "Generating Makefile."
cp $pathnames bin/path_names
cat > bin/mkmf.template << DELIM
CC = $pgi/pgcc
FC = $pgi/pgf90
LD = $pgi/pgf90
CPPFLAGS = -Mmpi=mpich
FFLAGS = -Mmpi=mpich -r8 -Ktrap=fp -pc 64 -O2
LDFLAGS = $flags_links $flags_libs -Mmpi=mpich
LIST = -Mlist
DELIM
cat $mkmftemplate >> bin/mkmf.template # appends provided template to custom defs
cd bin # model will be compiled here, and put Makefile here
echo ../$mkmf -p fms.x -t mkmf.template -c "$cppdefs" -a src path_names \
  src/shared/mpp/include src/shared/include ${include[@]} # the other include files
../$mkmf -p fms.x -t mkmf.template -c "$cppdefs" -a src path_names \
  src/shared/mpp/include src/shared/include ${include[@]} # the other include files

#------------------------------------------------------------------------------#
# Compile model using Makefile recipe
echo "Compiling source code."
make -f Makefile
cp ./fms.x ../
echo "This script took $(($(date +%s) - $time)) seconds."

